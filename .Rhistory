paste0(insts[k],"[^[A-Z]]")
paste0("NHM","[^[A-Z]]")
test<-paste0("NHM","[^[A-Z]]")
grep(test,"NHMW")
grepl(test,"NHMW")
grepl(test,"NHM")
test<-paste0("(NHM)","([^[A-Z]])")
test<-paste0("(NHM)","([^[A-Z]]+)")
grepl(test,"NHM")
test
test<-paste0("(NHM)","([[A-Z]])")
grepl(test,"NHM")
grepl(test,"NHMW")
test<-paste0("(NHM)","([^A-Z]+)")
grepl(test,"NHMW")
grepl(test,"NHM")
paste0("(.*)(","NHM",")([^A-Z]+)")
test<-paste0("(.*)(","NHM",")([^A-Z]+)")
grepl(test,c("NHM","NHMW"))
test<-"NHM"
grepl(test,c("NHM","NHMW"))
test<-paste0("NHM","[A-Z]")
grepl(test,c("NHM","NHMW"))
test<-paste0("NHM","[^A-Z]")
grepl(test,c("NHM","NHMW"))
test<-paste0("NHM","[^A-Z]+")
grepl(test,c("NHM","NHMW"))
test<-paste0("NHM","[A-Z]")
grepl(test,c("NHM","NHMW","NHMAP"))
which(grepl(test,c("NHM","NHMW","NHMAP")))
test<-paste0("NHM","[1-3]")
which(grepl(test,c("NHM","NHMW","NHMAP")))
length(which(grepl(test,c("NHM","NHMW","NHMAP"))))
insts<-"NHM"
k<-1
words<-c("NHM","NHMW","NHMAP")
findAbbr<-which(grepl(insts[k],words,fixed=T)&!grepl(paste0(insts[k],"[A-Z]"),words)) #find all instances of this institution abbreviation
#----------------------SETUP: INSTALL LIBRARIES, FIND DIRECTORY, CONNECT TO POSTGRES----------------------------#
if (require("RPostgreSQL",warn.conflicts=FALSE)==FALSE) {
install.packages("RPostgreSQL",repos="http://cran.cnr.berkeley.edu/");
library("RPostgreSQL");
}
if (require("rjson",warn.conflicts=FALSE)==FALSE) {
install.packages("rjson",repos="http://cran.cnr.berkeley.edu/");
library("rjson");
}
#locate correct directory
#this is super ugly but there is, alas, currently no good way to do it
if("spec_num.R"%in%dir()){
this.dir<-getwd()} else {
print("Please locate this script in your directory structure.")
this.dir<-dirname(file.choose())
}
source(file.path(this.dir,"functions.R"))
#connect to PostgreSQL
Credentials<-as.matrix(read.table(file.path(dirname(this.dir),"credentials.yml"),row.names=1,fill=TRUE))
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",])
#----------------------GET REDUCED TABLE FROM POSTGRES----------------------------#
#pull museum abbreviations from geodeepdive dictionary via API
url<-"https://geodeepdive.org/api/dictionaries?dict=museums&show_terms"
museumAllNames<-names(rjson::fromJSON(paste(suppressWarnings(readLines(url)),collapse = ""))$success$data[[1]]$term_hits)
museumAbbrs<-museumAllNames[!grepl("[[:lower:]]",museumAllNames)]
#create table in SQL to hold abbreviation matches
dbColNames<-"docid,sentid,words"
dbSendQuery(con,paste0("DROP TABLE IF EXISTS mus_abbr_matches;
SELECT ",dbColNames," INTO mus_abbr_matches FROM sentences WHERE 1=0;
ALTER TABLE mus_abbr_matches ADD inst varchar;"))
#match each abbreviation in museums against sentence table in db
for (i in 1:length(museumAbbrs)) {
query<-paste0("INSERT INTO mus_abbr_matches (",dbColNames,",inst) SELECT ",dbColNames,",'",museumAbbrs[i],"' FROM sentences WHERE array_to_string(words, ' ') ~'",museumAbbrs[i],"';")
dbSendQuery(con,query)
}
#get resulting table
mm<-dbReadTable(con,c("public","mus_abbr_matches"))
#parse out duplicates
mus<-combineDuplicates(mm)
#----------------------EXTRACT NUMBERS FROM DATAFRAME IN R----------------------------#
specs<-extractMultiple(mus)
#----------------------EXPORT RESULTS TO OUTPUT FOLDER AND POSTGRES----------------------------#
write.csv(file=file.path(dirname(this.dir),"output/specimens.csv"),specs)
dbSendQuery(con,"DROP TABLE IF EXISTS specimens;")
dbWriteTable(con,"specimens",specs,row.names=F)
Credentials
Credentials["database:",]<-"vsyverson"
con<-dbConnect(drv, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",])
#----------------------GET REDUCED TABLE FROM POSTGRES----------------------------#
#pull museum abbreviations from geodeepdive dictionary via API
url<-"https://geodeepdive.org/api/dictionaries?dict=museums&show_terms"
museumAllNames<-names(rjson::fromJSON(paste(suppressWarnings(readLines(url)),collapse = ""))$success$data[[1]]$term_hits)
museumAbbrs<-museumAllNames[!grepl("[[:lower:]]",museumAllNames)]
#create table in SQL to hold abbreviation matches
dbColNames<-"docid,sentid,words"
dbSendQuery(con,paste0("DROP TABLE IF EXISTS mus_abbr_matches;
SELECT ",dbColNames," INTO mus_abbr_matches FROM sentences WHERE 1=0;
ALTER TABLE mus_abbr_matches ADD inst varchar;"))
#match each abbreviation in museums against sentence table in db
for (i in 1:length(museumAbbrs)) {
query<-paste0("INSERT INTO mus_abbr_matches (",dbColNames,",inst) SELECT ",dbColNames,",'",museumAbbrs[i],"' FROM sentences WHERE array_to_string(words, ' ') ~'",museumAbbrs[i],"';")
dbSendQuery(con,query)
}
#----------------------SETUP: INSTALL LIBRARIES, FIND DIRECTORY, CONNECT TO POSTGRES----------------------------#
if (require("RPostgreSQL",warn.conflicts=FALSE)==FALSE) {
install.packages("RPostgreSQL",repos="http://cran.cnr.berkeley.edu/");
library("RPostgreSQL");
}
if (require("rjson",warn.conflicts=FALSE)==FALSE) {
install.packages("rjson",repos="http://cran.cnr.berkeley.edu/");
library("rjson");
}
#locate correct directory
#this is super ugly but there is, alas, currently no good way to do it
if("spec_num.R"%in%dir()){
this.dir<-getwd()} else {
print("Please locate this script in your directory structure.")
this.dir<-dirname(file.choose())
}
source(file.path(this.dir,"functions.R"))
Credentials<-as.matrix(read.table(file.path(dirname(this.dir),"credentials.yml"),row.names=1,fill=TRUE))
Credentials["database:",]<-"vsyverson"
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",])
#----------------------GET REDUCED TABLE FROM POSTGRES----------------------------#
#pull museum abbreviations from geodeepdive dictionary via API
url<-"https://geodeepdive.org/api/dictionaries?dict=museums&show_terms"
museumAllNames<-names(rjson::fromJSON(paste(suppressWarnings(readLines(url)),collapse = ""))$success$data[[1]]$term_hits)
museumAbbrs<-museumAllNames[!grepl("[[:lower:]]",museumAllNames)]
#create table in SQL to hold abbreviation matches
dbColNames<-"docid,sentid,words"
dbSendQuery(con,paste0("DROP TABLE IF EXISTS mus_abbr_matches;
SELECT ",dbColNames," INTO mus_abbr_matches FROM sentences WHERE 1=0;
ALTER TABLE mus_abbr_matches ADD inst varchar;"))
#match each abbreviation in museums against sentence table in db
for (i in 1:length(museumAbbrs)) {
query<-paste0("INSERT INTO mus_abbr_matches (",dbColNames,",inst) SELECT ",dbColNames,",'",museumAbbrs[i],"' FROM sentences WHERE array_to_string(words, ' ') ~'",museumAbbrs[i],"';")
dbSendQuery(con,query)
}
#get resulting table
mm<-dbReadTable(con,c("public","mus_abbr_matches"))
#parse out duplicates
mus<-combineDuplicates(mm)
#----------------------EXTRACT NUMBERS FROM DATAFRAME IN R----------------------------#
specs<-extractMultiple(mus)
#----------------------EXPORT RESULTS TO OUTPUT FOLDER AND POSTGRES----------------------------#
write.csv(file=file.path(dirname(this.dir),"output/specimens.csv"),specs)
dbSendQuery(con,"DROP TABLE IF EXISTS specimens;")
dbWriteTable(con,"specimens",specs,row.names=F)
specs[specs$docid=="54f0445ee138237cc9152e3f",]
drv<-dbDriver("PostgreSQL")
con<-dbConnect(drv, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",])
test<-"-10039"
gsub("^-",test)
grepl("^-",test)
test<-"100-39"
grepl("^-",test)
test<-"-10039"
gsub("^-",test,"")
gsub("^-","",test)
test<-c("-10039","-29991","2020-32"
)
gsub("^-","",test)
test<-c(test,"/19938","1997/389")
gsub("^[-/]","",test)
test<-c(test,"0.000025","0","0.102.24")
grepl([[:digit:]],test)
grepl("[[:digit:]]",test)
grepl("^0.",test)
grepl("[1-9]",test)
grepl("(^0.).([^.])",test)
test
grepl("(^0.).([^\.])",test)
grepl("\.",test)
grepl("\\.",test)
grepl("(^0.).([^\\.])",test)
grepl("(^0.)([^\\.])",test)
grepl("(^0.)*([^\\.])",test)
grepl("(^0.).*([^\\.])",test)
grepl("(^0\\.)",test)
test<-c(test,".17796")
grepl("(^0\\.)",test)
test
gsub("^[-/\\.]","",test)
grepl("(^0\\.)(^\\.)",test)
grepl("(^0\\.).*(^\\.)",test)
grepl("(^0\\.)(.*)(^\\.)",test)
grepl("(^0\\.)(.*)(\\.)",test)
grepl("(^0\\.)(.*)(^[\\.])",test)
grepl("(0\\.)(.*)([\\.])",test)
grepl("^(0\\.)(.*)([\\.])",test)
grepl("(0\\.)(.*)([^\\.])",test)
grepl("(0\\.)(.*)([^[\\.]])",test)
grepl("(0\\.)(.*)([\\.])",test)
grepl("{[\\.]{2,}}|[\\.]",test)
grepl("(0\\.)([\\.])",test)
grepl("(0\\.).*([\\.])",test)
dbSendQuery(con,paste0("DROP TABLE IF EXISTS mus_abbr_matches;
SELECT ",dbColNames," INTO mus_abbr_matches FROM sentences WHERE 1=0;
ALTER TABLE mus_abbr_matches ADD inst varchar;"))
#match each abbreviation in museums against sentence table in db
for (i in 1:length(museumAbbrs)) {
query<-paste0("INSERT INTO mus_abbr_matches (",dbColNames,",inst) SELECT ",dbColNames,",'",museumAbbrs[i],"' FROM sentences WHERE array_to_string(words, ' ') ~'",museumAbbrs[i],"';")
dbSendQuery(con,query)
}
grepl("(0\\.)",test)
grepl("(0\\.)",test)&grepl("[\\.]{1}")
grepl("(0\\.)",test)&grepl("[\\.]{1}",test)
grepl("(0\\.)",test)&grepl("[\\.]{1,}",test)
grepl("(0\\.)",test)&grepl("[\\.]{1,1}",test)
grepl("[\\.]{1,1}",test)
grepl("[\\.]{1}",test)
grepl("\\.{1}",test)
test
test<-c(test,"2.0.15")
grepl("(0\\.)",test)
grepl("(\\<0\\.)",test)
grepl("(\\<[0\\.])",test)
grepl("(\<[0\\.])",test)
grepl("\<[0\\.]",test)
grepl("\\<[0\\.]",test)
problem_sentences<-dbGetQuery(con, "SELECT * FROM mus_abbr_matches WHERE docid='55070b8ee1382326932d93d6';")
test<-extractMultiple(problem_sentences)
test
grepl("\b[0\\.]",test)
test<-c("0.12","1997.01","0.55.8")
grepl("\b[0\\.]",test)
grepl("\b0\\.",test)
grepl("\b(0\\.)",test)
test<-c("0.12","1997.01","0.55.8","0A88")
grepl("\b0",test)
grepl("\b(0)",test)
grepl("\b(0)",test,perl=T)
grepl("\b0",test,perl=T)
grepl([^a]*a[^a]*$,test)
grepl("[^a]*a[^a]*$",test)
grepl("[^\\.]*\\.[^\\.]*$",test)
grepl("\b0",test)
grepl("\\<0",test)
grepl("^0",test)
grepl("^[0\\.]",test)
grepl("^0\\.",test)
grepl("(\\.){2,}",test)
grepl("\\.{2,}",test)
grepl("\\.{2}",test)
grepl("\\.{2}","0..5")
grepl("(\\.)(.)()",test)
grepl("(\\.)(.*)(\\.)",test)
grepl("(^[0\\.])(.*)(\\.)",test)
grepl("^[0\\.](.*)(\\.)",test)
grepl("(^0\\.)(.*)(\\.)",test)
grepl("(^0\\.)(.*)([^\\.])",test)
grepl("(^0\\.)(.*)([^.])",test)
grepl("[^\\.]",c("0.1","0"))
gsub("[[:blank:]]","   13")
gsub("[[:blank:]]","",   13")
gsub("[[:blank:]]","",   "13")
gsub("^[-[:blank:]]","",   "13")
?stripWhitespace
grepl("[^\\.]",c("0.1","0"))
words
grepl("[1-9]",test)==T&!(grepl("^0\\.",test)&!grepl("(\\.)(.*)(\\.)",test))
test
specs$specno
sort(specs$specno)
taxon<-"athene"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
source("makepaleoTS.R")
require(paleoTS)
getwd)_
getwd()
setwd("/Users/v")
setwd("/Users/vsyverson/Dropbox/Science/RLB/")
source("makepaleoTS.R")
require(paleoTS)
taxon<-"athene"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
taxon<-"asio"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
taxon<-"athene"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
i<-1
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
dataTS[[1]]
data
plot(dataTS[,1],dataTS[,i+1])
plot(data[,1],data[,i+1])
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]))
points(data[,1],data[,i+1])
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
taxon<-"asio"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
load("~/Dropbox/Science/RLB/.RData")
