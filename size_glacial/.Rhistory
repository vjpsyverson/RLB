ss<-as.array(measurements[20][1])
ss
ss<-head(as.array(measurements[20][1]))
#test
ss<-head(as.array(measurements[20][1]))
write.table(ss[1,],output_file,append=T,col.names=T,row.names=F,sep="\t");
dim(ss)
sss
ss
str(ss)
ss<-ss[[1]]
ss
str(ss)
as.array(ss)
as.matrix(ss)
ss<-as.matrix(ss)
ss
ss<-head(ss)
ss
#test
ss<-head(as.matrix(measurements[20][1]))
ss
#test
ss<-head(as.matrix(measurements[20][[1]]))
ss
write.table(ss[1,],output_file,append=T,col.names=T,row.names=F,sep="\t");
write.table(ss[1,],"output_file.csv",append=T,col.names=T,row.names=F,sep="\t");
write.table(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
getwd()
write.table(ss[2,],"output_file.csv",append=T,col.names=T,row.names=F,sep="\t");
#test
ss<-head(measurements[20][[1]])
str(ss)
write.table(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
write.table(ss[2,],"output_file.csv",append=T,col.names=T,row.names=F,sep="\t");
write.table(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
write.table(ss[2,],"output_file.csv",append=T,col.names=F,row.names=F,sep="\t");
write.table(ss[1,],"output_file.csv",col.names=T,row.names=T,sep="\t");
ss
write.table(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
write.table(ss[2,],"output_file.csv",append=T,col.names=T,row.names=F,sep="\t");
write.table(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
write.table(ss[2,],"output_file.csv",append=T,col.names=F,row.names=F,sep="\t");
#test
ss<-head(as.matrix(measurements[20][[1]]))
ss
write.csv(ss[1,],"output_file.csv",col.names=T,row.names=F,sep="\t");
write.csv(ss[1,],"output_file.csv",col.names=T,row.names=F);
write.csv(ss[1,],"output_file.csv",row.names=F);
ss<-c(1,2,3,4,5,6,7,8)
str(ss)
class(ss)
ss<-vector(c(1,2,3,4,5,6,7,8))
ss<-as.vector(c(1,2,3,4,5,6,7,8))
ss
as.data.frame(ss)
data.frame(ss)
data.frame(dim=c(8,2))
data.frame(array(dim=c(8,2)))
data.frame(array(dim=c(2,8)))
tt<-data.frame(array(dim=c(2,8)))
tt[3,]<-ss
tt
tt<-data.frame(A,B,C,D,E,F,G,H)
write.table(ss[2,],"output_file.csv",append=T,col.names=F,row.names=F,sep="\t");
ss<-as.vector(c(1,2,3,4,5,6,7,8))
ss
as.data.frame(t(ss))
require(RPostgreSQL);require(openxlsx)
PostgreSQL(max.con = 16,fetch.default.rec = 500,force.reload = FALSE)
driver<-dbDriver("PostgreSQL")
con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
test<-fetch(dbSendQuery(con,"select * from helloworld;"))
test;rm(test)
#script
#get C14 samples data from xlsx
fileName<-"all_C14_ages.xlsx"
#P. atrox & Smilodon astragali (4.1, 5.3): measurement names?
i<-4;j<-1
c(names(cleaned[i]),names(cleaned[[i]][j]))
#fix error in list structure
#temp<-cleaned[[i]];elemName<-unlist(strsplit(names(cleaned[i]),"_"))[length(unlist(strsplit(names(cleaned[i]),"_")))]
#cleaned[[i]]<-list(temp);names(cleaned[[i]])<-elemName;names(cleaned)[i]<-paste(unlist(strsplit(names(cleaned[i]),"_"))[-length(unlist(strsplit(names(cleaned[i]),"_")))],collapse="_")
#rename columns
head(cleaned[[i]][[j]])
#P. atrox & Smilodon astragali (4.1, 5.3): measurement names?
i<-5;j<-3
c(names(cleaned[i]),names(cleaned[[i]][j]))
#fix error in list structure
#temp<-cleaned[[i]];elemName<-unlist(strsplit(names(cleaned[i]),"_"))[length(unlist(strsplit(names(cleaned[i]),"_")))]
#cleaned[[i]]<-list(temp);names(cleaned[[i]])<-elemName;names(cleaned)[i]<-paste(unlist(strsplit(names(cleaned[i]),"_"))[-length(unlist(strsplit(names(cleaned[i]),"_")))],collapse="_")
#rename columns
head(cleaned[[i]][[j]])
#fix error in list structure
#temp<-cleaned[[i]];elemName<-unlist(strsplit(names(cleaned[i]),"_"))[length(unlist(strsplit(names(cleaned[i]),"_")))]
#cleaned[[i]]<-list(temp);names(cleaned[[i]])<-elemName;names(cleaned)[i]<-paste(unlist(strsplit(names(cleaned[i]),"_"))[-length(unlist(strsplit(names(cleaned[i]),"_")))],collapse="_")
#rename columns
cleaned[[i]][[j]]
by(cleaned[[i]][[j]],Pit)
cleaned[[i]][[j]]
head(cleaned[[i]][[j]])
by(cleaned[[i]][[j]],cleaned[[i]][[j]]$Pit)
by(cleaned[[i]][[j]],cleaned[[i]][[j]]$Pit,mean)
by(cleaned[[i]][[j]],cleaned[[i]][[j]]$Pit,mean,na.rm=T)
warnings()
head(cleaned[[i]][[j]])
cleaned[[i]][[j]][1,]
str(cleaned[[i]][[j]][1,])
by(cleaned[[i]][[j]]$L1,cleaned[[i]][[j]]$Pit,mean,na.rm=T)
str(C14ages)
by(C14ages$Uncal14CAge,C14Ages$Pit,mean)
by(C14ages$Uncal14CAge,C14ages$Pit,mean)
by(C14ages$Uncal14CAge,C14Ages$Pit,mean,na.rm=T)
by(C14ages$Uncal14CAge,C14ges$Pit,mean,na.rm=T)
by(C14ages$Uncal14CAge,C14ages$Pit,mean,na.rm=T)
subset(C14ages,C14ages$Pit==16)
subset(C14ages$Uncal14CAge,C14ages$Pit==16)
table(C14ages$Pit)
subset(C14ages$Uncal14CAge,C14ages$Pit==23)
as.numeric(subset(C14ages,C14ages$Pit==16))
as.numeric(subset(C14ages$Uncal14CAge,C14ages$Pit==16))
str(C14ages)
as.numeric(subset(C14ages,C14ages$Pit==23))
as.numeric(subset(C14ages$Uncal14CAge,C14ages$Pit==23))
grep(",",C14ages$Uncal14CAge)
gsub(",","",C14ages$Uncal14CAge)
C14ages.numeric<-C14ages
C14ages.numeric$Uncal14CAge<-gsub(",","",C14ages.numeric$Uncal14CAge)
C14ages.numeric$Uncal14CAge<-as.numeric(C14ages.numeric$Uncal14CAge)
C14ages.numeric<-C14ages
C14ages.numeric$Uncal14CAge<-as.numeric(C14ages.numeric$Uncal14CAge)
C14ages.numeric<-C14ages
C14ages.numeric$Uncal14CAge<-gsub(",","",C14ages.numeric$Uncal14CAge)
C14ages.numeric$Uncal14CAge<-gsub(">","",C14ages.numeric$Uncal14CAge)
C14ages.numeric$Uncal14CAge<-as.numeric(C14ages.numeric$Uncal14CAge)
C14ages.numeric<-C14ages
C14ages.numeric$Uncal14CAge<-gsub(",","",C14ages.numeric$Uncal14CAge)
C14ages.numeric$Uncal14CAge<-gsub(">","",C14ages.numeric$Uncal14CAge)
C14ages.numeric$Uncal14CAge
C14ages.numeric$Uncal14CAge<-as.numeric(C14ages.numeric$Uncal14CAge)
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,mean,na.rm=T)
boxplot(C14ages.numeric$Pit,C14ages.numeric$Uncal14CAge)
test<-subset(C14ages.numeric,C14ages.numeric$Pit=="91")
boxplot(test$Uncal14CAge)
plot(test$Uncal14CAge)
hist(test$Uncal14CAge)
test2<-subset(C14ages.numeric,C14ages.numeric$Pit=="23")
hist(test2$Uncal14CAge)
table(C14ages$Pit)
test3<-subset(C14ages.numeric,C14ages.numeric$Pit=="4")
hist(test3$Uncal14CAge)
hist(test2$Uncal14CAge)
hist(test$Uncal14CAge)
test$Uncal14CAge
subset(C14ages$Uncal14CAge,C14ages$Pit=="23")
subset(C14ages$Uncal14CAge,C14ages$Pit=="91")
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,mode,na.rm=T)
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,mode)
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,density))
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,density)
density(subset(C14ages$Uncal14CAge,C14ages$Pit=="91"))
density(test)
test
density(test,na.rm=T)
density(1)
density(c(1,2)
)
str(test)
density(test$Uncal14CAge,na.rm=T)
Modes <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[tab == max(tab)]
}
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,Modes)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
by(C14ages.numeric$Uncal14CAge,C14ages.numeric$Pit,Mode)
plot(density(test$Uncal14CAge,na.rm=T))
plot(density(test2$Uncal14CAge,na.rm=T))
plot(density(test3$Uncal14CAge,na.rm=T))
ageRanges
pitAgesNew
require(RPostgreSQL);require(openxlsx);require(GeoChronR)
install.packages("GeoChronR")
install.packages("remotes")
remotes::install_github("nickmckay/geoChronR")
install.packages("GeoChronR")
install.packages("spatstat.core","lipdR")
install.packages("spatstat.core")
install.packages("mgcv")
install.packages("spatstat.core")
install.packages(lipdR")
install.packages("lipdR")
remotes::install_github("nickmckay/lipdR")
library(remotes)
remotes::install_github("nickmckay/lipdR")
install.packages("mapview")
install.packages("KernSmooth")
install.packages("mapview")
View(C14ages.numeric)
remotes::install_github("nickmckay/lipdR")
install.packages("systemfonts")
install.packages("systemfonts")
install.packages("svglite")
install.packages("leafpop")
remotes::install_github("nickmckay/lipdR")
remotes::install_github("nickmckay/geoChronR")
require(RPostgreSQL);require(openxlsx);require(GeoChronR)
require(RPostgreSQL);require(openxlsx);require(geoChronR)
PostgreSQL(max.con = 16,fetch.default.rec = 500,force.reload = FALSE)
driver<-dbDriver("PostgreSQL");con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
driver<-dbDriver("PostgreSQL");con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
#functions
strip<-function(x){gsub("[^[:alnum:]]", "",x)}
insertBatch <- function(con,tn,df,size=100L) {
if (nrow(df)==0L) return(invisible());
cnt <- (nrow(df)-1L)%/%size+1L;
for (i in seq(0L,len=cnt)) {
sql <- paste0("insert into \"",tn,"\" values (",do.call(paste,c(sep=',',collapse='),(',lapply(df[seq(i*size+1L,min(nrow(df),(i+1L)*size)),],shQuote))),");");
dbSendQuery(con,sql);
};
invisible();
};
PostgreSQL(max.con = 16,fetch.default.rec = 500,force.reload = FALSE)
driver<-dbDriver("PostgreSQL");con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
require(RPostgres)
remotes::install_github("r-dbi/RPostgres")
dim(cleaned)
str(cleaned)
length(cleaned)
lapply(length,cleaned)
?lapply
lapply(cleaned,length)
unlist(lapply(cleaned,length))
hist(unlist(lapply(cleaned,length)))
sum(unlist(lapply(cleaned,length)))
head(cleaned[[1]])
head(cleaned[[1]][1])
head(cleaned[[1]][[1]])
test<-unlist(cleaned)
head(test)
rbind.data.frame(cleaned)
rbind.data.frame(cleaned[[1]])
lapply(cleaned[[1]],length)
head(cleaned[[1]]$astragalus)
head(cleaned[[1]]$humerus)
head(cleaned[[12]]$Tarsometatarsus)
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
test<-array()
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
test<-c(test,cleaned[[i]][[j]]$Pit)}}
table(test)
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
test<-c(test,cleaned[[i]][[j]]$PIT)}}
table(test)
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(cleaned[[i]][[j]]$Pit)}}
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(name(cleaned[[i]]),name(cleaned[[i]][[j]],cleaned[[i]][[j]]$Pit)}}
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(name(cleaned[[i]]),name(cleaned[[i]][[j]]),cleaned[[i]][[j]]$Pit)}}
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(names(cleaned[[i]]),names(cleaned[[i]][[j]]),cleaned[[i]][[j]]$Pit)}}
names(cleaned[[i]])
j
names(cleaned[[i]][[j]])
names(cleaned[i])
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(names(cleaned[i]),names(cleaned[[i]]),cleaned[[i]][[j]]$Pit)}}
for (i in 1:length(cleaned)){
for (j in 1:length(cleaned[[i]])){
print(c(names(cleaned[i]),names(cleaned[[i]]),cleaned[[i]][[j]]$Pit))}}
test
which(test=="modern")
subset(test,test=="modern")
table(test)
hist(table(test))
test1<-table(test)
test1
subset(test,grepl("[0-9]",names(test)))
names(test)
colnames(test)
str(test)
subset(test,grepl("[0-9]",names(test1)))
subset(test1,grepl("[0-9]",names(test1)))
test2<-subset(test1,grepl("[0-9]",names(test1)))
length(test2)
cleaned[[4]]
dim(C14ages)
head(C14ages)
table(C14ages$Pit)
ages
C14ages.numeric$Uncal14CAge
max(C14ages.numeric$Uncal14CAge)
max(C14ages.numeric$Uncal14CAge,na.rm=T)
summary(ages.cal)
#ages<-fetch(dbSendQuery(con,"select * from c14samples;"))
ages<-C14ages.numeric
ages$Uncal14CError<-as.numeric(gsub(",","",ages$Uncal14CError))
ages.clean<-ages[-c(which(is.na(ages$Uncal14CAge)),which(is.na(ages$Uncal14CErr))),]
ages.cal<-BchronCalibrate(
ages=as.numeric(ages.clean$Uncal14CAge),
ageSds=as.numeric(ages.clean$Uncal14CErr),
calCurves = rep("intcal20",nrow(ages.clean)))
sink(file="CI.txt")
summary(ages.cal)
sink()
file.show("CI.txt")
str(ages.cal)
require(RPostgreSQL);require(openxlsx);require(Bchron)
install.packages("Bchron")
install.packages("Bchron")
require(RPostgreSQL);require(openxlsx);require(Bchron)
install.packages("openxlsx")
source("~/Github/RLB/size_glacial/functions.R")
install.packages("geoChronR")
require(remotes)
remotes::install_github("nickmckay/geoChronR")
source("~/Github/RLB/size_glacial/functions.R")
source("~/Github/RLB/size_glacial/functions.R")
install.packages("spatstat.core")
install.packages("mgcv")
install.packages("spatstat.core")
install.packages("lipdR")
remotes::install_github("nickmckay/lipdR")
install.packages("KernSmooth")
remotes::install_github("nickmckay/lipdR")
install.packages("RJSONIO")
install.packages("RJSONIO")
install.packages("neotoma2")
remotes::install_github("nickmckay/lipdR")
remotes::install_github("neotomadb/neotoma2")
remotes::install_github("neotomadb/neotoma2")
source("~/Github/RLB/size_glacial/functions.R")
require(RPostgreSQL)
require(rmarkdown)
require(openxlsx)
require(Bchron)
remotes::install_github("neotomadb/neotoma2")
devtools::install_github('NeotomaDB/neotoma2')
install.packages("devtools")
remotes::install_github("NeotomaDB/neotoma2")
install.packages("pkgdown")
install.packages("harfbuzz")
install.packages("pkgdown")
install.packages("pkgdown")
install.packages("devtools")
devtools::install_github('NeotomaDB/neotoma2')
remotes::install_github("nickmckay/lipdR")
remotes::install_github("nickmckay/geoChronR")
require(geoChronR)
source("~/Github/RLB/size_glacial/functions.R")
require(paleoTS)
install.packages("paleoTS")
source("functions.R")
plot(cars)
source("functions.R")
PostgreSQL(max.con = 16,fetch.default.rec = 500,force.reload = FALSE)
driver<-dbDriver("PostgreSQL");con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
test<-fetch(dbSendQuery(con,"select * from helloworld;"))
test;rm(test)
ages<-dbGetQuery(con,"select * from c14samples;")
ages$pit<-factor(ages$pit)
ages$uncal14cage<-as.numeric(ages$uncal14cage);ages$uncal14cerror=as.numeric(ages$uncal14cerror)
ages.clean<-ages
calpits<-split(ages.clean,ages.clean$pit)
pit.ages.cal<-lapply(calpits,calibrate.pit.ages)
all.ages<-calibrate.pit.ages(ages.clean)
test<-dbGetQuery(con,"select * from species where 'M1'=any(Elements)")
test;rm(test)
test<-dbGetQuery(con,"SELECT * FROM tablenames WHERE tablenames LIKE '%Buteo%';")
test;rm(test)
test<-dbGetQuery(con,"SELECT * FROM tablenames WHERE tablenames LIKE '%buteo%';")
test;rm(test)
tables.to.get<-unlist(dbGetQuery(con,"SELECT * FROM tablenames WHERE tablenames LIKE '%astragalus%';"))
astragalus.tables<-setNames(as.list(c(1:length(tables.to.get))),tables.to.get)
for (i in 1:length(tables.to.get)){
query<-paste0("SELECT * FROM ",tables.to.get[i],";",collapse = "")
astragalus.tables[[i]]<-dbGetQuery(con,query)
}
summary(astragalus.tables)
source("functions.R")
quickSetupOxcal(path = "~/OxCal")
geoChronR::quickSetupOxcal()
geoChronR::quickSetupOxcal(path = "~/OxCal")
require(lipdR)
geoChronR::quickSetupOxcal(path = "~/OxCal")
quickSetupOxcal(path = "~/OxCal")
library(geoChronR)
library(lipdR)
library(oxcAAR)
library(dplyr)
library(ggplot2)
library(oxcAAR)
quickSetupOxcal(path = "~/OxCal")
L <- readLipd("http://wiki.linked.earth/wiki/index.php/Special:WTLiPD?op=export&lipdid=BJ8-03-70GGC.Linsley.2010")
str(L)
oxcAAR::KDE_plot
install.packages("rcarbon")
require(rcarbon)
source("~/Github/RLB/size_glacial/functions.R")
head(ages.db)
head(ages.clean)
source("~/Github/RLB/size_glacial/functions.R")
all.ages<-calibrate.pit.ages(ages.clean)
source("~/Github/RLB/size_glacial/functions.R")
all.ages<-calibrate.pit.ages(ages.clean)
pit.ages.cal<-lapply(calpits,calibrate.pit.ages)
PostgreSQL(max.con = 16,fetch.default.rec = 500,force.reload = FALSE)
driver<-dbDriver("PostgreSQL");con<-dbConnect(driver,user="vsyverson",password="gymnogyps",dbname="rlb")
test<-fetch(dbSendQuery(con,"select * from helloworld;"))
test;rm(test)
ages<-dbGetQuery(con,"select * from c14samples;")
ages$pit<-factor(ages$pit)
ages$uncal14cage<-as.numeric(ages$uncal14cage);ages$uncal14cerror=as.numeric(ages$uncal14cerror)
ages.clean<-ages
calpits<-split(ages.clean,ages.clean$pit)
pit.ages.cal<-lapply(calpits,calibrate.pit.ages)
all.ages<-calibrate.pit.ages(ages.clean)
head(all.ages)
str(all.ages)
summary(all.ages)
str(all.ages)
length(all.ages$grids)
nrow(ages.clean)
sampleDates(all.ages,bins=ages.clean$pit)
pit.randomdates<-sampleDates(all.ages,bins=ages.clean$pit)
pit.ckde<-ckde(pit.randomdates)
pit.kde<-ckde(pit.randomdates)
str(pit.randomdates)
for (i in 1:length(pit.ages.cal)){
ckde(pit.ages.cal[[i]])
}
pit.ages.cal[1]
for (i in 1:length(pit.ages.cal)){
ckde(pit.ages.cal[i])
}
class(all.ages)
all.ages<-ckde(x=as.numeric(ages.clean$uncal14cage),errors=as.numeric(ages.clean$uncal14cerror))
all.ages<-calibrate(x=as.numeric(ages.clean$uncal14cage),errors=as.numeric(ages.clean$uncal14cerror))
class(all.ages)
pit.randomdates<-sampleDates(all.ages,bins=ages.clean$pit)
str(pit.randomdates)
class(pit.randomdates)
pit.kde<-ckde(pit.randomdates$sdates)
class(pit.randomdates)[1]
class(pit.randomdates$sdates)
pit.kde<-ckde(pit.randomdates[1])
class(pit.randomdates$weight)
pit.kde<-ckde(pit.randomdates,bins=ages.clean$pit)
ages.clean$pit
?binPrep
binPrep(sites=ages.clean$pit)
pit.ages.cal[1]
class(pit.ages.cal[1])
test.rdates<-sampleDates(pit.ages.cal[1])
as.CalDates
test<-as.CalDates(pit.ages.cal[1])
test.rdates<-sampleDates(pit.ages.cal[1])
test.rdates<-sampleDates(all.ages)
class(test.rdates)
class(pit.ages.cal[1])
all.ages<-calpits(ages.clean)
all.ages<-calibrate.pit.ages(ages.clean)
str(all.ages)
class(all.ages)
pit.ages.cal<-lapply(calpits,calibrate.pit.ages)
str(pit.ages.cal)
class(pit.ages.cal)
class(pit.ages.cal[1])
class(pit.ages.cal$`16`)
pit.randomdates<-sampleDates(pit.ages.cal$`23`)
pitnames<-names(pit.ages.cal)
pitnames
i
paste0("pit.ages.cal$",pitnames[i])
sampleDates(paste0("pit.ages.cal$",pitnames[i]))
class(which(pit.ages.cal,names==pitnames[i]))
class(which(pit.ages.cal$names==pitnames[i]))
class(subset(pit.ages.cal,pit.ages.cal$names==pitnames[i]))
pit.kde<-ckde(pit.randomdates,bins=ages.clean$pit)
pit.randomdates<-sampleDates(pit.ages.cal$`23`)
pit.kde<-ckde(pit.randomdates)
?ckde
class(pit.randomdates)
class(pit.randomdates$sdates)
pit.randomdates$sdates
str(pit.randomdates$sdates)
Edit(ckde)
edit(ckde)
pit.randomdates$sdates[1]
length(pit.randomdates$sdates[[1]])
pit.ages[1]
dim(all.ages)
str(all.ages$calmatrix)
str(all.ages$grids)
plot(pit.ages.cal$23)
plot(pit.ages.cal$`23`
)
?ckde
pit.kde<-ckde(pit.randomdates,timeRange=c(100000,1000),bw=100)
