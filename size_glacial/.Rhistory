source("makepaleoTS.R")
require(paleoTS)
require(xlsx)
options(stringsAsFactors = F)
for (i in c(1,3,5,7,9)) print(i)
raw<-list()
for (i in 1:5) raw[i]<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw
for (i in 1:5) raw[i]<-data.frame[read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)]
for (i in 1:5) raw[i]<-data.frame(read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1))
for (i in 1:5) {
k<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw[i]<-data.frame(k)
}
raw[1]
raw<-list(rep(data.frame()))
raw[1]
raw<-list(rep(data.frame(),5))
raw[2]
raw[1]
raw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())
raw[2]
for (i in 1:5) {
k<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw[i]<-data.frame(k)
}
raw[2]
read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 1)
test<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 1)
str(test)
test<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 1)[,2:6]
str(test)
test<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 1)[-1,2:6]
str(test)
raw[1]<-test
str(raw[1])
raw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())
raw[1]<-test
str(raw[1])
str(raw[[1]])
raw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())
str(raw[[1]])
for (i in 1:5) {
k<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw[[i]]<-data.frame(k)
}
data<-raw
data[1]
head(data$length)
data$length<-data$length[,2:6]
rm(data)
raw->vultures
vultures$length<-vultures$length[,2:6]
head(vultures$width)
raw->vultures
vultures$length<-vultures$length[-1,2:6]
vultures$width<-vultures$width[-1,1:5]
View(vultures)
head(vultures$area)
head(vultures$depth)
vultures$depth<-vultures$depth[-1,1:5]
head(vultures$area)
head(vultures$r)
head(vultures$robustness)
for (i in 1:5) {colnames(vultures[[i]])<-c(0,14,18,21,35)
}
vultures
vultures<-raw
vultures$length<-vultures$length[,2:6]
vultures$width<-vultures$width[,1:5]
vultures$depth<-vultures$depth[,1:5]
for (i in 1:5) {
vultures[[i]]<-vultures[[i]][-1,]
colnames(vultures[[i]])<-c(0,14,18,21,35)}
vultures
?kw
?kw.test
?kruskal.test
as.list(vultures[1])
split(vultures[1],seq(ncol(vultures[1])))
split(vultures[[1]],seq(ncol(vultures[[1]])))
seq_len(nrow(vultures[1]))
seq_len(nrow(vultures[[1]]))
seq_len(ncol(vultures[[1]]))
as.list(as.data.frame(t(vultures[[1]])))
as.list(as.data.frame(vultures[[1]]))
for(i in 1:5) {
vultures[i]<-as.list(as.data.frame(vultures[[i]]))
}
vultures[1]
C.occ<-list(length=list(length,width,depth,area,robustness))
rm(length)
C.occ<-list(length=list(length=array(),width=array(),depth=array(),area=array(),robustness=array()))
C.occ
C.occ<-list(length=list())
i<-1
vultures[i]<-as.list(as.data.frame(vultures[[i]]))
C.occ
raw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())
for (i in 1:5) {
k<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw[[i]]<-data.frame(k)
}
vultures<-raw
vultures$length<-vultures$length[,2:6]
vultures$width<-vultures$width[,1:5]
vultures$depth<-vultures$depth[,1:5]
for (i in 1:5) {
vultures[[i]]<-vultures[[i]][-1,]
colnames(vultures[[i]])<-c(0,14,18,21,35)
}
C.occ[i]<-as.list(as.data.frame(vultures[[i]]))
C.occ
C.occ<-list(length=list())
C.occ[[i]]<-as.list(as.data.frame(vultures[[i]]))
C.occ
i
i<-1
C.occ<-list(length=list())
C.occ[[i]]<-as.list(as.data.frame(vultures[[i]]))
C.occ
C.occ<-list(length=list(),width=list(),depth=list(),area=list(),robustness=list())
for (i in 1:5) {
C.occ[[i]]<-as.list(as.data.frame(vultures[[i]]))
}
raw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())
for (i in 1:5) {
k<-read.xlsx("Katherine/Black Vulture Data Analysis.xlsm",sheetIndex = 2*i-1)
raw[[i]]<-data.frame(k)
}
raw$length<-raw$length[,2:6]
raw$width<-raw$width[,1:5]
raw$depth<-raw$depth[,1:5]
for (i in 1:5) {
raw[[i]]<-raw[[i]][-1,]
colnames(raw[[i]])<-c(0,14,18,21,35)
}
C.occ<-list(length=list(),width=list(),depth=list(),area=list(),robustness=list())
for (i in 1:5) {
C.occ[[i]]<-as.list(as.data.frame(raw[[i]]))
}
kruskal.test(C.occ$length)
dunn.test(C.occ$length)
??dunn.test
install.packages("dunn.test")
lapply(C.occ$length,var)
lapply(C.occ$length,var,na.rm=T)
lapply(C.occ$length,sd,na.rm=T)
lapply(C.occ$length,var,na.rm=T)
var(unlist(C.occ$length),na.rm=T)
unlist(lapply(C.occ$length,var,na.rm=T))->test
test<-c(test,var(unlist(C.occ$length),na.rm=T))
test
test<-array(test)
test
test[2,]
test<-data.frame(var=test,n=0)
test
count<-function(x) {length(!is.na(x))}
lapply(C.occ$length,count)
C.occ$length[1]
is.na'(C.occ$length[1])
is.na(C.occ$length[1])
is.na(C.occ$length$0)
is.na(C.occ$length$`0``)
is.na(C.occ$length$`0`)
count<-function(x) {length(which(!is.na(x)))}
lapply(C.occ$length,count)
unlist(lapply(C.occ$length,count))
test$n[1:5]<-unlist(lapply(C.occ$length,count))
test
test$n[6]<-sum(test$n[1:5])
test
plot(test)
plot(test$n,test$var)
ecdf(C.occ$length)
?ecdf
x <- rnorm(12)
Fn <- ecdf(x)
Fn
Fn(x)
unlist(lapply(C.occ$length,ecdf))
test<-unlist(lapply(C.occ$length,ecdf))
test
lapply(test,knots)
plot(test$`0`)
lapply(test,points,col=c("red","green","blue","yellow","black"))
lapply(test,points)
points(test$`14`,col="r")
points(test$`14`,col="red")
test$`14`()
test$`14`
lapply(test,plot,add=T)
plot(test$`0`)
lapply(test,plot,col=c("red","green","blue","yellow","black"))
lapply(test,plot,add=T)
lapply(test,plot,add=T,lty="l")
lapply(test,plot,add=T,type="l")
lapply(test,plot,add=T,lty=1)
lapply(test,plot,add=T)
plot(test$`0`)
lapply(test,plot,add=T,lty=1)
plot(test$`0`)
plot(test$`14`,col="red")
plot(test$`0`)
plot(test$`14`,col="red",add=T)
plot(test$`18`,col="blue",add=T)
plot(test$`21`,col="green",add=T)
plot(test$`35`,col="yellow",add=T)
ecdfPlot<-function(x){
#x is a list of vectors
test<-unlist(lapply(x,ecdf))
plot(test$`0`)
plot(test$`14`,col="red",add=T)
plot(test$`18`,col="blue",add=T)
plot(test$`21`,col="green",add=T)
plot(test$`35`,col="yellow",add=T)
}
ecdfPlot(C.occ$width)
ecdfPlot(C.occ$depth)
ecdfPlot(C.occ$area)
ecdfPlot(C.occ$robustness)
ecdfPlot(C.occ$depth)
plot(C.occ$depth)
plot(C.occ$depth$`0`
)
hist(C.occ$depth$`0`)
hist(C.occ$depth$`14`)
test<-lapply(C.occ,kruskal.test)
test
library(boot)
install.packages("kSamples")
require(kSamples)
test<-lapply(C.occ,ad.test)
test
test[1]
test
.05/5
test<-lapply(C.occ,pairwise.wilcox.test)
wilcox.test(C.occ$length$`0`,C.occ$length$`14`)
wilcox.test(C.occ$length$`0`,C.occ$length$`18`)
wilcox.test(C.occ$length$`14`,C.occ$length$`18`)
source("makepaleoTS.R")
require(paleoTS)
require(xlsx)
install.packages("xlsx")
require(xlsx)
options(stringsAsFactors = F)
View(owls.make.paleoTS)
install.packages("xlsx")
require(xlsx)
options(stringsAsFactors = F)
#general form of data processing
taxon<-"asio"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
#general form of data processing
taxon<-"athene"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
age.fac<-factor(data$AGE,levels=rev(levels(factor(data$AGE))))
par(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])
par(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
for (i in 1:4) print(kruskal.test(data[,i+1],age.fac))
correction<-0.05/length(levels(age.fac))
MWboot<-array(dim=c(length(levels(age.fac)),4));colnames(MWboot)<-names(data)[-1];rownames(MWboot)<-levels(age.fac)
for (j in 1:4){
groups<-split(data[,j+1],age.fac)
for (i in 1:length(levels(age.fac))) {
x1<-unlist(groups[i]); x2<-unlist(groups[-i])
MWboot[i,j]<-round(wilcox.test(x1,x2)$p.value,4)
}
}
for(i in 1:length(MWboot)) if(MWboot[i]<=correction) MWboot[i]<-paste0(as.character(MWboot[i]),"*")
write.csv(MWboot,paste0(taxon,"MWboot.csv"))
lapply(dataTS,fit4models.punc,pool=F)
lapply(dataTS,fit3models,pool=F)
lapply(dataTS,fit4models,pool=F)
?fit4models
?opt.StrictStasis
lapply(dataTS,fit4models.punc,pool=F)
lapply(dataTS,fit9models,pool=F)
par(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])
par(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
for (i in 1:4) print(kruskal.test(data[,i+1],age.fac))
correction<-0.05/length(levels(age.fac))
age.fac<-factor(data$AGE,levels=rev(levels(factor(data$AGE))))
age.f
age.fac
age.f
age.fac
par(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])
par(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
source("makepaleoTS.R")
require(paleoTS)
require(xlsx)
options(stringsAsFactors = F)
source("../r-utilities/utilities.R")
taxon<-"athene"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
age.fac<-factor(data$AGE,levels=rev(levels(factor(data$AGE))))
par(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])
par(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
for (i in 1:4) print(kruskal.test(data[,i+1],age.fac))
correction<-0.05/length(levels(age.fac))
correction
for(i in 1:length(MWboot)) if(MWboot[i]<=correction) MWboot[i]<-paste0(as.character(MWboot[i]),"*")
MWboot<-array(dim=c(length(levels(age.fac)),4));colnames(MWboot)<-names(data)[-1];rownames(MWboot)<-levels(age.fac)
for (j in 1:4){
groups<-split(data[,j+1],age.fac)
for (i in 1:length(levels(age.fac))) {
x1<-unlist(groups[i]); x2<-unlist(groups[-i])
MWboot[i,j]<-round(wilcox.test(x1,x2)$p.value,4)
}
}
for(i in 1:length(MWboot)) if(MWboot[i]<=correction) MWboot[i]<-paste0(as.character(MWboot[i]),"*")
MWboot
for (j in 1:4){
groups<-split(data[,j+1],age.fac)
for (i in 1:length(levels(age.fac))) {
x1<-unlist(groups[i]); x2<-unlist(groups[-i])
MWboot[i,j]<-round(wilcox.test(x1,x2)$p.value,4)
}
}
for(i in 1:length(MWboot)) if(MWboot[i]<=correction) MWboot[i]<-paste0(as.character(MWboot[i]),"*")
MWboot
for (i in 1:4) print(names(data[,i+1]),kruskal.test(data[,i+1],age.fac))
for (i in 1:4) print(names(data)[,i+1],kruskal.test(data[,i+1],age.fac))
for (i in 1:4) print(names(data)[i+1],kruskal.test(data[,i+1],age.fac))
names(data)
names(data[i+1])
for (i in 1:4) print(cbind(names(data)[i+1],kruskal.test(data[,i+1],age.fac)))
for (i in 1:4) print(kruskal.test(data[,i+1],age.fac))
KWtest<-array(dim=c(length(levels(age.fac)),4));colnames(KWtest)<-names(data)[-1];rownames(KWtest)<-levels(age.fac)
KWtest
KWtest<-array(dim=4,4));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")"))
KWtest<-array(dim=c(4,5);rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")"))
KWtest<-array(dim=c(4,5));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")"))
KWtest<-array(dim=c(4,5));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")")))
KWtest<-array(dim=c(5,4));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")")))
names(data)[-1]
c("Measurement","K-W chi-squared","df","p-value",paste0(c("significant (p<",correction,")")))
paste0(c("significant (p<",correction,")"))
paste0("significant (p<",correction,")")
KWtest<-array(dim=c(4,4));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
;
KWtest<-array(dim=c(4,4))
rownames(KWtest)<-names(data)[-1]
KWtest
colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
KWtest<-array(dim=c(4,5))
rownames(KWtest)<-names(data)[-1]
colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
KWtest<-array(dim=c(4,5));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("Measurement","K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
KWtest
i
test<-kruskal.test(data[,i+1],age.fac)
test
str(test)
KWtest<-array(dim=c(4,4));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
for (i in 1:4) {
test<-kruskal.test(data[,i+1],age.fac)
KWtest[i,1:4]<-c(test$statistic,test$parameter,test$p.value,test$p.value<correction)
}
KWtest
?write
write(taxon,file=paste0(taxon,"KWtest.txt"))
filename<-paste0(taxon,"KWtest.txt")
write(KWtest,file=filename,append=T)
filename<-paste0(taxon,"KWtest.txt")
write.csv(KWtest,file=filename)
filename<-paste0(taxon,"KWtest.csv")
write.csv(KWtest,file=filename)
#general form of data processing
taxon<-"asio"
data<-read.csv(paste0("csvs/",taxon,"TMT.csv"))
data$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH
dataTS<-make.paleoTS(data,agelookup=F)
age.fac<-factor(data$AGE,levels=rev(levels(factor(data$AGE))))
par(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])
par(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)
par(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {
plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))
points(data[,1],data[,i+1])
}
correction<-0.05/length(levels(age.fac))
KWtest<-array(dim=c(4,4));rownames(KWtest)<-names(data)[-1];colnames(KWtest)<-c("K-W chi-squared","df","p-value",paste0("significant (p<",correction,")"))
for (i in 1:4) {
test<-kruskal.test(data[,i+1],age.fac)
KWtest[i,1:4]<-c(test$statistic,test$parameter,test$p.value,test$p.value<correction)
}
filename<-paste0(taxon,"KWtest.csv")
write.csv(KWtest,file=filename)
