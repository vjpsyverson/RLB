{
    "collab_server" : "",
    "contents" : "##deals with .csv file of format [Pit#,dim1,dim2,...]\n\n#library(paleoTS)\n#setwd(\"C:/Users/vjsyvers/Documents/R/RLB/csvs\")\n#pit.ages<-read.csv(\"pitages.csv\") ##lookup array where [,1] contains pit numbers and [,2] their ages\n# rawdata<-read.csv(file=\"caracara.csv\")\n\nmake.paleoTS<-function(file,agelookup=TRUE){\n\tif(class(file)==\"string\") {rawdata<-read.csv(file)}\telse rawdata<-file\n\trawdata<-rawdata[!is.na(rawdata[,1]),]\n\tif(agelookup==TRUE){\n\t\tpitnumber<-rawdata[,1]\n\t\tspec.ages<-array(dim=dim(rawdata)[1])\n\t\tallpits<-levels(factor(sort(rawdata[,1])))\n\t\tfor(i in 1:length(allpits)){\n\t\t\tin.pit.i<-which(pitnumber==allpits[i])\n\t\t\tif (allpits[i]%in%pit.ages[,1]){\n\t\t\t\tage<-pit.ages[which(pit.ages[,1]==allpits[i]),2]\n\t\t\t\tspec.ages[in.pit.i]<-age\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspec.ages<-array(dim=dim(rawdata)[1])\n\t\t\tspec.ages<-rawdata[,1]\n\t\t}\n\trawdata<-rawdata[order(spec.ages,decreasing=TRUE),]\n\tallnames<-list(rev(unique(spec.ages)),c(\"mm\",\"vv\",\"nn\",\"tt\"),colnames(rawdata)[2:length(colnames(rawdata))])\n\toutput<-array(dim=c(length(unique(spec.ages)),4,dim(rawdata)[2]-1),dimnames=allnames)\n\tfor (i in 1:length(unique(spec.ages))){\n\t\tif (!is.na(rev(unique(spec.ages))[i])){\n\t\t\tin.age.i<-which(spec.ages==rev(unique(spec.ages))[i])\n\t\t\toutput[i,4,]<-mean(spec.ages[in.age.i])\n\t\t\tfor (j in 2:(dim(rawdata)[2])){\n\t\t\t\tspecs<-which(!is.na(rawdata[in.age.i,j]))\n\t\t\t\toutput[i,1,j-1]<-mean(rawdata[specs,j],na.rm=T)\n\t\t\t\toutput[i,2,j-1]<-var(rawdata[specs,j],na.rm=T)\n\t\t\t\toutput[i,3,j-1]<-length(specs)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tresult<-list()\n\tfor (j in 1:(dim(rawdata)[2]-1)){\n\t\tgood<-which(!is.na(output[,1,j])&!is.na(output[,2,j])&!is.na(output[,3,j])&!is.na(output[,4,j]))\n\t\tgood<-good[names(sort(output[good,4,j]))]\n\t\tresult[[j]]<-as.paleoTS(mm=output[good,1,j],vv=output[good,2,j],nn=output[good,3,j],tt=output[good,4,j],oldest=\"last\")\n\t\tnames(result)[j]<-colnames(rawdata)[j+1]\n\t\t}\n\treturn(result)\n\t}\n\nowls.make.paleoTS<-function(rawdata){\n\tdata<-rawdata[,-c(1,2)]\n\tspec.ages<-rawdata[,2]\n\tallnames<-list(unique(spec.ages),c(\"mm\",\"vv\",\"nn\",\"tt\"),colnames(data)[1:length(colnames(data))])\n\toutput<-array(dim=c(length(unique(spec.ages)),4,dim(data)[2]),dimnames=allnames)\n\tfor (i in 1:length(unique(spec.ages))){\n\t\tin.age.i<-which(spec.ages==unique(spec.ages)[i])\n\t\toutput[i,4,]<-mean(spec.ages[in.age.i])\n\t\tfor (j in 1:(dim(data)[2])){\n\t\t\toutput[i,1,j]<-mean(data[in.age.i,j],na.rm=T)\n\t\t\toutput[i,2,j]<-var(data[in.age.i,j],na.rm=T)\n\t\t\toutput[i,3,j]<-length(in.age.i)\n\t\t\t}\n\t\t}\n\tresult<-list()\n\tfor (j in 1:(dim(data)[2])){\n\t\tgood<-which(!is.na(output[,1,j])&!is.na(output[,2,j])&!is.na(output[,3,j])&!is.na(output[,4,j]))\n\t\tgood<-good[names(sort(output[good,4,j]))]\n\t\tresult[[j]]<-as.paleoTS(mm=output[good,1,j],vv=output[good,2,j],nn=output[good,3,j],tt=output[good,4,j])\n\t\tnames(result)[j]<-colnames(data)[j]\n\t\t}\n\treturn(result)\n\t}\n\nfit3models.hacked<-function (y, pool = TRUE, silent = FALSE, method = c(\"AD\", \"Joint\")) {\n    method <- match.arg(method)\n    if (method == \"AD\") {\n        m1 <- opt.GRW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n        m2 <- opt.URW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10)))\n        m3 <- opt.Stasis(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-9, 1e-9)))\n    }\n    else if (method == \"Joint\") {\n        m1 <- opt.joint.GRW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n        m2 <- opt.joint.URW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10)))\n        m3 <- opt.joint.Stasis(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n    }\n    mc <- compareModels(m1, m2, m3, silent = silent)\n    invisible(mc)\n}\t\n\nfit4models.punc<-function (y, pool = TRUE, silent = FALSE, method = c(\"AD\", \"Joint\"), gg, minb=2) {\n    method <- match.arg(method)\n    if (method == \"AD\") {\n        m1 <- opt.GRW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n        m2 <- opt.URW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10)))\n        m3 <- opt.Stasis(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-9, 1e-9)))\n        m4 <- fitGpunc(y, pool = pool, minb=minb,method=\"AD\")\n    }\n    else if (method == \"Joint\") {\n        m1 <- opt.joint.GRW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n        m2 <- opt.joint.URW(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10)))\n        m3 <- opt.joint.Stasis(y, pool = pool, cl=list(fnscale=-1, ndeps=c(1e-10, 1e-10)))\n        m4 <- fitGpunc(y, pool = pool, minb=minb,method=\"Joint\")\n    }\n    mc <- compareModels(m1, m2, m3, m4, silent = silent)\n    invisible(mc)\n}\t\n\t\ntest3.paleoTS<-function(data){\n\tresult<-array(dim=c(length(data),3))\n\tdimnames(result)<-list(names(data),c(\"GRW\",\"URW\",\"Stasis\"))\n\tfor(i in 1:length(data)){\n#\t\tprint(names(data)[i])\n\t\tsink(\"NUL\")\n#\t\tfits<-fit3models(data[[i]])\n\t\tfits<-fit3models.hacked(data[[i]])\n\t\tsink()\n\t\tresult[i,]<-fits$Akaike.wt\n\t\t}\n\treturn(result)\n\t}\n",
    "created" : 1524255871468.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "628406660",
    "id" : "FE33DA70",
    "lastKnownWriteTime" : 1481055024,
    "last_content_update" : 1481055024,
    "path" : "~/Dropbox/Science/RLB/size_glacial/makepaleoTS.R",
    "project_path" : "makepaleoTS.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}