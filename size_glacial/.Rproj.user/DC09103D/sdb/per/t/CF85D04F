{
    "collab_server" : "",
    "contents" : "source(\"makepaleoTS.R\")\nrequire(paleoTS)\nrequire(xlsx)\noptions(stringsAsFactors = F)\n\ncaracara.TS<-make.paleoTS(\"caracara.csv\")\ncaracara.test<-test3.paleoTS(caracara.TS)\n\nequusAstrag.TS<-make.paleoTS(\"equusAstragali.csv\")\n\naquila.TS<-make.paleoTS(\"aquilaTMT.csv\")\naquila.test<-test3.paleoTS(aquila.TS)\nx<-compareModels(opt.URW(aquila.TS[[1]]),opt.Stasis(aquila.TS[[1]]))\naquila.test[1,2:3]<-x$Akaike.wt\nwrite.csv(aquila.test,file=\"modelTests/aquilaTest.csv\")\n\nsetwd(\"C:/Users/vjsyvers/Documents/R/RLB/csvs\")\nfileList<-dir()\nfileList<-fileList[-c(14,19,29:32)]\n\nfor (i in 1:length(fileList)){\n\tprint(fileList[i])\n\tTS<-make.paleoTS(fileList[i])\n\ttest<-test3.paleoTS(TS)\n\twrite.csv(test,file=paste(\"modelTests/\",substr(fileList[i],1,nchar(fileList[i])-4),\"Test.csv\",sep=\"\"))\n\t}\n\ncount<-array(dim=3)\nfor (i in 1:length(fileList)){\n\tprint(fileList[i])\n\tTS<-make.paleoTS(fileList[i])\n\tfoo<-array(dim=c(length(TS),3))\n\tfoo[,1]<-rep(fileList[i],length(TS))\n\tfoo[,2]<-names(TS)\n\tfor (j in 1:length(TS)){foo[j,3]<-sum(TS[[j]]$nn)}\n\tcount<-rbind(count,foo)\n\t}\n\n\n\ntest<-make.paleoTS(\"gymnogypsCMC.csv\")\ntestTS<-test3.paleoTS(test)\nlength(test)\npar(mfrow=c(1,1))\nfor (i in 2:2) plot(test[[i]])\n\nopt.GRW(test[[1]],cl=list(fnscale=-1, ndeps=c(1e-9, 1e-9)))\nfit3models.hacked(test[[1]])\nfit3models(test[[1]])\n\nfileList2<-fileList[c(3,9,10,13,15,16,17,19,21,22,24)]\nfor (i in 1:length(fileList2)){\n\tprint(fileList2[i])\n\tTS<-make.paleoTS(fileList2[i])\n\ttest<-test3.paleoTS(TS)\n#\twrite.csv(test,file=paste(\"modelTests/\",substr(fileList2[i],1,nchar(fileList2[i])-4),\"Test.csv\",sep=\"\"))\n\t}\n\nsize<-array(dim=length(fileList))\nfor (i in 1:length(fileList)){\n\ttemp<-read.csv(fileList[i])\n\tages<-array(dim=dim(temp)[1])\n\tfor (j in 1:dim(temp)[1]){\n\t\tpits<-pit.ages[which(pit.ages[,1]==temp[j,1]),2]\n\t\tif (length(pits)>0){ages[j]<-pits}\n\t}\n\tsize[i]<-length(which(!is.na(ages)))\n}\n\nsetwd(\"C:/Users/vjsyvers/Documents/R/RLB/csvs/modelTests\")\ntestList<-dir()[-1]\nallTests<-array()\ntestNames<-array()\nfor (i in 1:length(testList)){\n\tread<-read.csv(testList[i])\n\tallTests<-rbind(allTests,read)\n\ttestNames<-c(testNames,rep(substr(testList[i],1,nchar(testList[i])-8),nrow(read)))\n\t}\nallTests<-cbind(testNames[2:length(testNames)],allTests[2:nrow(allTests),])\ncolnames(allTests)[1:2]<-c(\"sp\",\"measurement\")\nwrite.csv(allTests,file=\"allTests.csv\")\n\nlook<-which(allTests[,3]>allTests[,4]|allTests[,3]>allTests[,5])\nallTests[look,] #there are a lot! none for & instead of | though\n\nrandom<-which(allTests[,4]>allTests[,5]&allTests[,4]>allTests[,3])\nallTests[random,]\n\nstatic<-which(allTests[,5]>allTests[,4]&allTests[,5]>allTests[,3])\nallTests[static,]\n\nwhichModel<-allTests[,3:5]\nfor (i in 1:dim(allTests)[1]){for (j in 1:3){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,])}}\napply(allTests[,3:5],2,sum,na.rm=T)\napply(whichModel,2,sum,na.rm=T)\napply(whichModel,2,sum,na.rm=T)/sum(apply(whichModel,2,sum,na.rm=T))\n\n#   GRW    URW Stasis \n# 4.943 97.322 52.742 \n\n#   GRW    URW Stasis \n#     0     99     56\n\nallTests\nwhichModel<-cbind(allTests[,1:2],whichModel)\nwhichModel\n\nmod<-opt.Stasis(make.paleoTS(\"aquilaTMT.csv\"))\n?sim.GRW\n\nerrors<-read.table(file=\"errors.txt\",sep=\"!\")\nwarnings<-apply(errors,2,grepl,pattern=\"Warning\")\n\nfailed<-list(\n\tlist(\"bisonMetacarpal.csv\",4),\n\tlist(\"camelopsPatellae.csv\",c(1:3)),\n\tlist(\"caracara.csv\",c(1,3,5:10)),\n\tlist(\"equusAstragali.csv\",3),\n\tlist(\"equusBackLimbs.csv\",c(1:2)),\n\tlist(\"equusFrontLimbs.csv\",c(1:7)),\n\tlist(\"felisAstragali.csv\",4),\n\tlist(\"gymnogypsFemora.csv\",1),\n\tlist(\"smilodonHumeri.csv\",2))\n\ndata<-list()\nfor (i in 1:length(failed)){\n\tdata[[i]]<-make.paleoTS(failed[[i]][[1]])\n\t}\n\nfails.under.fit<-list()\nfor (i in 1:length(data)){\n\tfails.under.fit[[i]]<-list()\n\tfor (j in 1:length(failed[[i]][[2]])){\n\t\tfails.under.fit[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]\n\t\t}\n\tnames(fails.under.fit[[i]])<-rep(failed[[i]][[1]][1],length(failed[[i]][[2]]))\n}\n\nfailed2<-list(\t\n\tlist(\"caracara.csv\",7),\n\tlist(\"equusAstragali.csv\",3))\n\ndata2<-list()\nfor (i in 1:length(failed2)){\n\tdata2[[i]]<-make.paleoTS(failed2[[i]][[1]])\n\t}\n\nfails.under.tweaked.fit<-list()\nfor (i in 1:length(data2)){\n\tfails.under.tweaked.fit[[i]]<-list()\n\tfor (j in 1:length(failed2[[i]][[2]])){\n\t\tfails.under.tweaked.fit[[i]][[j]]<-data2[[i]][failed2[[i]][[2]]][j]\n\t\t}\n\tnames(fails.under.tweaked.fit[[i]])<-rep(failed2[[i]][[1]][1],length(failed2[[i]][[2]]))\n}\n\n#========================\nlibrary(paleoTS)\nsource(\"makepaleoTS.R\")\nsource(\"../r-utilities/utilities.R\")\ntemp<-grep(\"TMT\",dir(\"csvs\"),value=T)\nall.TMT.names<-paste(\"csvs/\",temp,sep=\"\")\n# pit.ages<-read.csv(\"csvs/pitages.csv\")\n\ntyto<-read.csv(\"TytoTMT.csv\")\ncoragyps<-read.csv(\"CoragypsTMT.csv\")\nteratornis<-read.csv(\"csvs/teratornisTMT.csv\")\ntytoTS<-make.paleoTS(\"tytoTMT.csv\",agelookup=F)\ncoragypsTS<-make.paleoTS(\"coragypsTMT.csv\",agelookup=F)\nteratornisTS<-make.paleoTS(\"csvs/teratornisTMT.csv\",agelookup=F)\npar(mfrow=c(2,3),mar=c(2,2,1,1))\nlapply(tytoTS,plot.paleoTS)\nlapply(coragypsTS,plot.paleoTS)\nlapply(teratornisTS,plot.paleoTS)\ndev.copy(png,'teratornis.png')\ndev.off()\n\n#images\ncairo_pdf(width=8,height=5,filename=\"coragyps.pdf\")\npar(mfrow=c(2,3),mar=c(2,2,2,1))\nfor(i in 1:5) {\n\tplot(coragyps[,1],y=coragyps[,i+1],col=\"darkgrey\",pch=1,xlim=rev(range(coragyps[,1])),\n\t\txlab=\"Pit age (ka)\", main=colnames(coragyps)[i+1],ylab=\"\")\n\tplot.paleoTS(coragypsTS[[i]],add=T)\n}\ndev.off()\n\n# basic stats \nfossil<-coragyps[,1]!=0\ntest<-apply(coragyps[fossil,2:6],2,kruskal.test,as.factor(coragyps$AGE[fossil]))\nkw.result<-data.frame(sapply(test,\"[[\",\"statistic\"),sapply(test,\"[[\",\"parameter\"),sapply(test,\"[[\",\"p.value\"))\nwrite.csv(kw.result,file=\"kw-result.csv\")\n\ncoragyps.s<-split(coragyps[,2:6],factor(coragyps[,1]))\nMW.boot<-array(dim=c(5,2*length(coragyps.s)))\nfor(i in 1:length(coragyps.s)){\n\tother<-coragyps[,1]!=as.numeric(names(coragyps.s[i]))\n\tfor(j in 2:6) {\n\t\tMW.boot[j-1,(2*i)-1]<-mean(coragyps[,j][!other])-mean(coragyps[,j][other])\n\t\tMW.boot[j-1,2*i]<-wilcox.test(coragyps[,j]~!other)$p.value\n\t}\n}\nwrite.csv(MW.boot,file=\"MW-boot.csv\")\n\nfit4models.punc(coragypsTS[[1]],pool=F,method=\"AD\")\npunc<-lapply(coragypsTS,fitGpunc,pool=F,minb=2)\nsapply(punc,\"[[\",\"parameters\")\n\ntest<-lapply(coragypsTS,fit4models.punc,minb=2)\ntest.array<-array(dim=c(5,8))\ntest.array[,c(1,3,5,7)]<-t(sapply(test,\"[[\",\"Akaike.wt\"))\ntest.array[,c(2,4,6,8)]<-t(sapply(test,\"[[\",\"AICc\"))\nwrite.csv(test.array,file=\"Akaike.csv\")\n\n#general form of data processing\ntaxon<-\"asio\"\ndata<-read.csv(paste0(\"csvs/\",taxon,\"TMT.csv\"))\ndata$ROBUSTNESS<-(data$WIDTH*data$DEPTH)/data$LENGTH\ndataTS<-make.paleoTS(data,agelookup=F)\nage.fac<-factor(data$AGE,levels=rev(levels(factor(data$AGE))))\n\npar(mfrow=c(2,2)); for (i in 1:4) hist(data[,i+1],main=names(data)[i+1])\npar(mfrow=c(1,1)); plot(data$LENGTH,data$WIDTH/data$DEPTH,col=age.fac,pch=19)\npar(mfrow=c(2,2),mar=c(2,3,3,1),oma=c(1,0,0,0)); for (i in 1:4) {\n  plot.paleoTS(dataTS[[i]],main=tolower(names(dataTS)[i]),ylim=range(data[,i+1]))\n  points(data[,1],data[,i+1])\n}\nfor (i in 1:4) print(kruskal.test(data[,i+1],age.fac))\ncorrection<-0.05/length(levels(age.fac))\nMWboot<-array(dim=c(length(levels(age.fac)),4));colnames(MWboot)<-names(data)[-1];rownames(MWboot)<-levels(age.fac)\nfor (j in 1:4){\n  groups<-split(data[,j+1],age.fac)\n  for (i in 1:length(levels(age.fac))) {\n    x1<-unlist(groups[i]); x2<-unlist(groups[-i])\n    MWboot[i,j]<-round(wilcox.test(x1,x2)$p.value,4)\n  }\n}\nfor(i in 1:length(MWboot)) if(MWboot[i]<=correction) MWboot[i]<-paste0(as.character(MWboot[i]),\"*\")\nwrite.csv(MWboot,paste0(taxon,\"MWboot.csv\"))\nlapply(dataTS,fit4models.punc,pool=F)\n\n#Katherine's thesis\nraw<-list(length=data.frame(),width=data.frame(),depth=data.frame(),area=data.frame(),robustness=data.frame())\nfor (i in 1:5) {\n  k<-read.xlsx(\"Katherine/Black Vulture Data Analysis.xlsm\",sheetIndex = 2*i-1)\n  raw[[i]]<-data.frame(k)\n}\nraw$length<-raw$length[,2:6]\nraw$width<-raw$width[,1:5]\nraw$depth<-raw$depth[,1:5]\nfor (i in 1:5) {\n  raw[[i]]<-raw[[i]][-1,]\n  colnames(raw[[i]])<-c(0,14,18,21,35)\n}\nC.occ<-list(length=list(),width=list(),depth=list(),area=list(),robustness=list())\nfor (i in 1:5) {\n  C.occ[[i]]<-as.list(as.data.frame(raw[[i]]))\n}\n\necdfPlot<-function(x){\n  #x is a list of vectors\n  test<-unlist(lapply(x,ecdf))\n  plot(test$`0`)\n  plot(test$`14`,col=\"red\",add=T)\n  plot(test$`18`,col=\"blue\",add=T)\n  plot(test$`21`,col=\"green\",add=T)\n  plot(test$`35`,col=\"yellow\",add=T)\n}\n\ntest<-lapply(C.occ,kruskal.test)\n",
    "created" : 1524255866427.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1596533857",
    "id" : "CF85D04F",
    "lastKnownWriteTime" : 1524268365,
    "last_content_update" : 1524268365533,
    "path" : "~/Dropbox/Science/RLB/size_glacial/run.R",
    "project_path" : "run.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}