rawdata<-read.csv(file)
rawdata<-rawdata[!is.na(rawdata[,1]),]
pitnumber<-rawdata[,1]
spec.ages<-array(dim=dim(rawdata)[1])
allpits<-levels(factor(sort(rawdata[,1])))
allnames<-list(allpits,c("mm","vv","nn","tt"),colnames(rawdata)[2:length(colnames(rawdata))])
output<-array(dim=c(length(allpits),4,dim(rawdata)[2]-1),dimnames=allnames)
result<-list()
for(i in 1:length(allpits)){
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
output[i,4,]<-mean(spec.ages[in.pit.i])
for (j in 2:(dim(rawdata)[2])){
specs<-which(!is.na(rawdata[in.pit.i,j]))
output[i,1,j-1]<-mean(rawdata[specs,j],na.rm=T)
output[i,2,j-1]<-var(rawdata[specs,j],na.rm=T)
output[i,3,j-1]<-length(specs)
}
}
for (j in 1:(dim(rawdata)[2]-1)){
good<-which(!is.na(output[,1,j])&!is.na(output[,2,j])&!is.na(output[,3,j])&!is.na(output[,4,j]))
good<-good[names(sort(output[good,4,j]))]
result[[j]]<-as.paleoTS(mm=output[good,1,j],vv=output[good,2,j],nn=output[good,3,j],tt=output[good,4,j])
names(result)[j]<-colnames(rawdata)[j+1]
}
return(result)
}
make.paleoTS(failed[[i]][[1]])
pit.ages<-read.csv("pitages.csv") ##lookup array where [,1] contains pit numbers and [,2] their ages
make.paleoTS(failed[[i]][[1]])
data<-list()
for (i in 1:length(failed)){
data[[i]]<-make.paleoTS(failed[[i]][[1]])
}
names(data)
data
length(data)
data[[1]]
names(data[[1]])
j<-1
failed[[i]][[j]]
failed[[i]]
i
i<-1
failed[[i]][[2]]
data[[i]]failed[[i]][[2]]
data[[i]][failed[[i]][[2]]]
names(data[[i]][failed[[i]][[2]]])
i<-4
names(data[[i]][failed[[i]][[2]]])
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){for (j in 1:length(failed[[i]][[2]]))}
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
for (i in 1:length(data)){for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
for (i in 1:length(data)){for (j in 1:length(failed[[i]][[2]])){
print(i,j)
#paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
i
j
i<1
i<-1
j<-1
data[[i]][failed[[i]][[2]]][j]
paleoTS.objects.with.error<-list()
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
paleoTS.objects.with.error
paleoTS.objects.with.error[[1]]
paleoTS.objects.with.error[[5]]
ls()
rm("data","i","failed","k","make.paleoTS","pit.ages")
rm("data","i","failed","j","make.paleoTS","pit.ages")
ls()
save.image("C:\\Users\\vjsyvers\\Documents\\R\\RLB\\csvs\\dataforGene.RData")
ls()
names(paleoTS.objects.with.error
)
i<-1
names(paleoTS.objects.with.error[[i]])
paleoTS.objects.with.error[[5]]
names(failed[[i]])
failed<-list(
list("bisonMetacarpal.csv",c(1:4)),
list("camelopsPatellae.csv",c(1:3)),
list("canisAstragali.csv",2),
list("caracara.csv",c(1,3,5:10)),
list("equusFrontLimbs.csv",c(3)),
list("harlaniPatella.csv",c(1:3)),
list("smilodonAstragali.csv",c(1:6)))
names(failed[[i]])
i<-5
failed[[i]]
failed[[i]][[i]]
failed[[i]][[1]]
paleoTS.objects.with.error[[i]]
paleoTS.objects.with.error[[i]][[1]]
names(paleoTS.objects.with.error[[i]][[1]])
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]]
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
failed[[i]][[1]]
paleoTS.objects.with.error[[i]]
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
data<-list()
for (i in 1:length(failed)){
data[[i]]<-make.paleoTS(failed[[i]][[1]])
}
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
data<-list()
for (i in 1:length(failed)){
data[[i]]<-make.paleoTS(failed[[i]][[1]])
}
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]]
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
names(paleoTS.objects.with.error[[i]])
paleoTS.objects.with.error[[i]]
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
names(paleoTS.objects.with.error[[i]])
paleoTS.objects.with.error[[i]]
i<-5
paleoTS.objects.with.error[[i]]
paleoTS.objects.with.error[[i]][[1]]
names(paleoTS.objects.with.error[[i]])<-"foo"
paleoTS.objects.with.error[[i]]
failed[[i]][[1]]
failed[[i]][[1]][1]
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]][1]
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
failed[[i]][[1]][1]
names(paleoTS.objects.with.error[[i]])
i<-5
names(paleoTS.objects.with.error[[i]])
failed<-list(
list("bisonMetacarpal.csv",c(1:4)),
list("camelopsPatellae.csv",c(1:3)),
list("canisAstragali.csv",2),
list("caracara.csv",c(1,3,5:10)),
list("equusFrontLimbs.csv",c(3)),
list("harlaniPatella.csv",c(1:3)),
list("smilodonAstragali.csv",c(1:6)))
data<-list()
for (i in 1:length(failed)){
data[[i]]<-make.paleoTS(failed[[i]][[1]])
}
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}}
names(paleoTS.objects.with.error[[i]])
names(paleoTS.objects.with.error[[i]])<-"foo"
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]]
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]][1]
paleoTS.objects.with.error[[i]]
i
i<-5
failed[[i]][[1]][1]
paleoTS.objects.with.error[[i]]
names(paleoTS.objects.with.error[[i]])
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]][1]
names(paleoTS.objects.with.error[[i]])
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}
names(paleoTS.objects.with.error[[i]])<-failed[[i]][[1]][1]
}
names(paleoTS.objects.with.error[[i]])
names(paleoTS.objects.with.error[[1]])
paleoTS.objects.with.error[[1]]
paleoTS.objects.with.error[[1]][[1]]
names(paleoTS.objects.with.error[[i]])
}
paleoTS.objects.with.error<-list()
for (i in 1:length(data)){
paleoTS.objects.with.error[[i]]<-list()
for (j in 1:length(failed[[i]][[2]])){
paleoTS.objects.with.error[[i]][[j]]<-data[[i]][failed[[i]][[2]]][j]
}
names(paleoTS.objects.with.error[[i]])<-rep(failed[[i]][[1]][1],length(failed[[i]][[2]]))
}
 names(paleoTS.objects.with.error[[i]])
 names(paleoTS.objects.with.error[[i]][[1]])
ls()
rm(ls())\
rm(ls())
set<-ls()
set<-ls()
set
rm(set(-7))
rm("data","failed","i","fit3models.hacked","j","make.paleoTS","set","test3.paleoTS","pit.ages")
ls()
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
caracara.TS<-make.paleoTS("caracara.csv")
caracara.TS[1]
rawdata<-read.csv(file="caracara.csv")
rawdata<-rawdata[!is.na(rawdata[,1]),]
pitnumber<-rawdata[,1]
spec.ages<-array(dim=dim(rawdata)[1])
allpits<-levels(factor(sort(rawdata[,1])))
allnames<-list(allpits,c("mm","vv","nn","tt"),colnames(rawdata)[2:length(colnames(rawdata))])
output<-array(dim=c(length(allpits),4,dim(rawdata)[2]-1),dimnames=allnames)
result<-list()
for(i in 1:length(allpits)){
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
output[i,4,]<-mean(spec.ages[in.pit.i])
for (j in 2:(dim(rawdata)[2])){
specs<-which(!is.na(rawdata[in.pit.i,j]))
output[i,1,j-1]<-mean(rawdata[specs,j],na.rm=T)
output[i,2,j-1]<-var(rawdata[specs,j],na.rm=T)
output[i,3,j-1]<-length(specs)
}
}
output
spec.ages[in.pit.i]
i<-1
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
spec.ages[in.pit.i]
i<-2
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
spec.ages[in.pit.i]
test<-spec.ages[in.pit.i]
?unique
length(unique(test))
rawdata<-read.csv(file)
rawdata<-rawdata[!is.na(rawdata[,1]),]
pitnumber<-rawdata[,1]
spec.ages<-array(dim=dim(rawdata)[1])
allpits<-levels(factor(sort(rawdata[,1])))
allnames<-list(allpits,c("mm","vv","nn","tt"),colnames(rawdata)[2:length(colnames(rawdata))])
output<-array(dim=c(length(unique(allpits)),4,dim(rawdata)[2]-1),dimnames=allnames)
result<-list()
in.pit.i
allpits[[i]]
allpits
which(allpits=="61")
i<-10
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
in.pit.i
spec.ages[in.pit.i]
pitnumber
which(pitnumber==allpits[i])
allpits[i]
which(pit.ages[,1]==allpits[i])
pit.ages[which(pit.ages[,1]==allpits[i]),]
age<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
age
allpits
which(pit.ages[,2]==age)
pit.ages[which(pit.ages[,2]==age))
pit.ages[which(pit.ages[,2]==age)]
pit.ages[which(pit.ages[,2]==age),]
unique(allpits)
unique(pit.ages[,2])
pit.ages[unique(pit.ages[,2]),]
pit.ages[unique(pit.ages[,2]),1]
pit.ages[,1]
pit.ages[which(pit.ages[,2]%in%unique(pit.ages[,2])),1]
unique(pit.ages[,2])
pit.ages
in.pit.i<-which(pitnumber==allpits[i])
in.pit.i
spec.ages
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
spec.ages[in.pit.i]<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
}
spec.ages
which(spec.ages==spec.ages[in.pit.i])
which(spec.ages==age)
rawdata<-read.csv(file)
rawdata<-rawdata[!is.na(rawdata[,1]),]
pitnumber<-rawdata[,1]
spec.ages<-array(dim=dim(rawdata)[1])
allpits<-levels(factor(sort(rawdata[,1])))
allnames<-list(allpits,c("mm","vv","nn","tt"),colnames(rawdata)[2:length(colnames(rawdata))])
result<-list()
for(i in 1:length(allpits)){
in.pit.i<-which(pitnumber==allpits[i])
if (allpits[i]%in%pit.ages[,1]){
age<-pit.ages[which(pit.ages[,1]==allpits[i]),2]
spec.ages[in.pit.i]<-age
}
}
spec.ages
unique(spec.ages)
age
pit.ages
age<-12
which(spec.ages==age)
which(spec.ages==unique(spec.ages)[i])
unique(spec.ages)
i<-1
which(spec.ages==unique(spec.ages)[i]
)
unique(spec.ages)[i]
unique(spec.ages)
test<-unique(spec.ages)
class(test)
test[1]
test[2]
?which
which(spec.ages==unique(spec.ages)[i])
spec.ages
which(is.NA(spec.ages))
which(is.na(spec.ages))
output<-array(dim=c(length(unique(spec.ages)),4,dim(rawdata)[2]-1),dimnames=allnames)
allnames
allnames<-list(unique(spec.ages),c("mm","vv","nn","tt"),colnames(rawdata)[2:length(colnames(rawdata))])
output<-array(dim=c(length(unique(spec.ages)),4,dim(rawdata)[2]-1),dimnames=allnames)
for (i in 1:length(unique(spec.ages))){
if (!is.na(unique(spec.ages)[i])){
in.age.i<-which(spec.ages==unique(spec.ages)[i])
output[i,4,]<-mean(spec.ages[in.age.i])
for (j in 2:(dim(rawdata)[2])){
specs<-which(!is.na(rawdata[in.age.i,j]))
output[i,1,j-1]<-mean(rawdata[specs,j],na.rm=T)
output[i,2,j-1]<-var(rawdata[specs,j],na.rm=T)
output[i,3,j-1]<-length(specs)
}
}
}
output
for (j in 1:(dim(rawdata)[2]-1)){
good<-which(!is.na(output[,1,j])&!is.na(output[,2,j])&!is.na(output[,3,j])&!is.na(output[,4,j]))
good<-good[names(sort(output[good,4,j]))]
result[[j]]<-as.paleoTS(mm=output[good,1,j],vv=output[good,2,j],nn=output[good,3,j],tt=output[good,4,j])
names(result)[j]<-colnames(rawdata)[j+1]
}
result
plot(result[[1]])
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
fileList<-dir()
fileList<-fileList[-c(18,28:31)]
fileList
fileList<-dir()
fileList
fileList<-fileList[-c(14,19,29:32)]
fileList
for (i in 1:length(fileList)){
print(fileList[i])
TS<-make.paleoTS(fileList[i])
test<-test3.paleoTS(TS)
write.csv(test,file=paste("modelTests/",substr(fileList[i],1,nchar(fileList[i])-4),"Test.csv",sep=""))
}
caracara.TS<-make.paleoTS("caracara.csv")
caracara.test<-test3.paleoTS(caracara.TS)
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
caracara.TS<-make.paleoTS("caracara.csv")
caracara.test<-test3.paleoTS(caracara.TS)
caracara.TS[[7]]
caracara.TS[[6]]
names(caracara.TS[[7]])
names(caracara.TS)
plot(caracara.TS[[7]])
fit3models(caracara.TS[[7]])
caracara.TS[[7]]
save.image("C:\\Users\\vjsyvers\\Documents\\R\\RLB\\csvs\\.RData")
failed2<-list(
list("caracara.csv",7),
list("equusAstragali.csv",3))
caracara.TS<-make.paleoTS("caracara.csv")
failed2
equusAstrag.TS<-make.paleoTS("equusAstragali.csv")
data2<-list()
for (i in 1:length(failed2)){
data2[[i]]<-make.paleoTS(failed2[[i]][[1]])
}
fails.under.tweaked.fit<-list()
for (i in 1:length(data2)){
fails.under.tweaked.fit[[i]]<-list()
for (j in 1:length(failed2[[i]][[2]])){
fails.under.tweaked.fit[[i]][[j]]<-data2[[i]][failed2[[i]][[2]]][j]
}
names(fails.under.tweaked.fit[[i]])<-rep(failed2[[i]][[1]][1],length(failed2[[i]][[2]]))
}
fails.under.tweaked.fit[[1]]
plot(fails.under.tweaked.fit[[1]])
par(mfrow=c(2,1))
plot(caracara.TS[[7]])
par(mfrow=c(1,2))
plot(caracara.TS[[7]])
par(mfrow=c(1,2))
plot(caracara.TS[[7]])
plot(equusAstrag.TS[[3]])
fit3models(caracara.TS[[7]])
opt.URW(caracara.TS[[7]]
)
fit2<-opt.URW(caracara.TS[[7]]
)
fit3<-opt.Stasis(caracara.TS[[7]])
compareModels(fit2,fit3)
test<-compareModels(fit2,fit3)
fileList<-dir()
fileList<-fileList[-c(14,19,29:32)]
fileList
which(fileList=="caracara.csv")
i<-which(fileList=="caracara.csv")
write.csv(test,file=paste("modelTests/",substr(fileList[i],1,nchar(fileList[i])-4),"Test.csv",sep=""))
test3.paleoTS(caracara.TS[[1]])
i<13
i<-13
print(fileList[i])
i
print(fileList[i])
TS<-make.paleoTS(fileList[i])
test<-test3.paleoTS(TS)
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
caracara.TS<-make.paleoTS("caracara.csv")
caracara.test<-test3.paleoTS(caracara.TS)
print(fileList[i])
TS<-make.paleoTS(fileList[i])
test<-test3.paleoTS(TS)
write.csv(test,file=paste("modelTests/",substr(fileList[i],1,nchar(fileList[i])-4),"Test.csv",sep=""))
test
ls()
source("C:/Users/vjsyvers/Documents/R/RLB/csvs/makepaleoTS.R")
setwd("C:/Users/vjsyvers/Documents/R/RLB/csvs/modelTests")
testList<-dir()
allTests<-array()
testNames<-array()
for (i in 1:length(testList)){
read<-read.csv(testList[i])
allTests<-rbind(allTests,read)
testNames<-c(testNames,rep(substr(testList[i],1,nchar(testList[i])-8),nrow(read)))
}
allTests<-cbind(testNames[2:length(testNames)],allTests[2:nrow(allTests),])
colnames(allTests)[1:2]<-c("sp","measurement")
testList
testList<-dir()[-1]
testList
allTests<-array()
testNames<-array()
for (i in 1:length(testList)){
read<-read.csv(testList[i])
allTests<-rbind(allTests,read)
testNames<-c(testNames,rep(substr(testList[i],1,nchar(testList[i])-8),nrow(read)))
}
allTests<-cbind(testNames[2:length(testNames)],allTests[2:nrow(allTests),])
colnames(allTests)[1:2]<-c("sp","measurement")
allTests
write.csv(allTests,file="allTests.csv")
look<-which(allTests[,3]>allTests[,4]|allTests[,3]>allTests[,5])
allTests[look,] #all three are in Smilodon and all have overwhelming support for random walk.
random<-which(allTests[,4]>allTests[,5]&allTests[,4]>allTests[,3])
allTests[random,]
static<-which(allTests[,5]>allTests[,4]&allTests[,5]>allTests[,3])
allTests[static,]
whichModel<-allTests[,3:5]
for (i in 1:dim(allTests)[1]){for (j in 1:3){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,])}}
apply(whichModel,2,sum)
for (i in 1:dim(allTests)[1]){for (j in 1:3){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,],na.rm=T)}}
apply(whichModel,2,sum)
for (i in 1:dim(allTests)[1]){for (j in 1:3){if(!is.NA(whichModel[i,j])){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,])}}}
for (i in 1:dim(allTests)[1]){for (j in 1:3){if(!is.na(whichModel[i,j])){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,])}}}
apply(whichModel,2,sum)
whichModel<-allTests[,3:5]
whichModel
apply(whichModel,2,sum)
apply(whichModel,2,sum,na.rm=T)
apply(whichModel,2,sum)/sum(apply(whichModel,2,sum))
apply(whichModel,2,sum,na.rm=T)/sum(apply(whichModel,2,sum,na.rm=T))
apply(allTests[,3:5],2,sum,na.rm=T)
for (i in 1:dim(allTests)[1]){for (j in 1:3){whichModel[i,j]<-whichModel[i,j]==max(whichModel[i,])}}
apply(whichModel,2,sum,na.rm=T)
